name: Reusable SYCL Linux build and test workflow

on:
  workflow_call:
    inputs:
      cc:
        type: string
        required: false
        default: "gcc"
      cxx:
        type: string
        required: false
        default: "g++"
      build_image:
        type: string
        required: false
        default: "ghcr.io/intel/llvm/ubuntu2004_build:latest"
      build_ref:
        type: string
        required: false
      build_cache_root:
        type: string
        required: true
      build_cache_suffix:
        type: string
        required: false
        default: "default"
      build_cache_size:
        type: string
        required: false
        default: 8G
      build_configure_extra_args:
        type: string
        required: false
        default: "--hip --cuda --enable-esimd-emulator"
      build_artifact_suffix:
        type: string
        required: true
      lts_matrix:
        type: string
        required: false
        default: ""
      lts_aws_matrix:
        type: string
        required: false
        default: ""
      lts_cmake_extra_args:
        type: string
        required: false
        default: ""
      lts_ref:
        type: string
        required: false
        default: 'intel'
      max_parallel:
        type: number
        required: false
        default: 4

jobs:
  build:
    name: Build + LIT
    runs-on: ubuntu-latest
    steps:
    - run: echo OK
    
  aws-start:
    name: Start AWS
    needs: build
    if: ${{ inputs.lts_aws_matrix != '' }}
    runs-on: ubuntu-latest
    environment: aws
    steps:
      - name: Setup script
        run: |
          mkdir -p ./aws-ec2
          wget raw.githubusercontent.com/apstasen/llvm/sycl/devops/actions/aws-ec2/action.yml   -P ./aws-ec2
          wget raw.githubusercontent.com/apstasen/llvm/sycl/devops/actions/aws-ec2/aws-ec2.js   -P ./aws-ec2
          wget raw.githubusercontent.com/apstasen/llvm/sycl/devops/actions/aws-ec2/package.json -P ./aws-ec2
          npm install ./aws-ec2
      - name: Start AWS EC2 runners
        uses: ./aws-ec2
        with:
          runs-on-list: ${{ inputs.lts_aws_matrix }}
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

  llvm_test_suite:
    needs: [build, aws-start]
    if: ${{ !failure() && inputs.lts_matrix != '' }}
    strategy:
      fail-fast: false
      max-parallel: ${{ inputs.max_parallel }}
      matrix:
        include: ${{ fromJSON(inputs.lts_matrix) }}
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    env: ${{ matrix.env }}
    container:
      image: ${{ matrix.image }}
      options: ${{ matrix.container_options }}
    steps:
    - name: Reset GPU
      if: ${{ contains(matrix.config, 'gen9') }}
      run: |
        sudo mount -t debugfs none /sys/kernel/debug
        sudo bash -c 'echo 1 > /sys/kernel/debug/dri/0/i915_wedged'
    - run: cp -r /actions .
    - name: Register cleanup after job is finished
      uses: ./actions/cleanup
    - name: Install drivers
      if: env.compute_runtime_tag != ''
      run: |
        if [ -e /opt/install_drivers.sh ]; then
          # TODO pack this script into container
          wget raw.githubusercontent.com/intel/llvm/${{ github.sha }}/devops/scripts/get_release.py
          sudo mv get_release.py /opt/
          sudo -E /opt/install_drivers.sh --all
        fi
    # FIXME cached_checkout fails here, but works everywhere else
    - uses: actions/checkout@v2
      with:
        path: llvm
    # TODO should this action be packed into container as well?
    - uses: ./llvm/devops/actions/llvm_test_suite
      name: Run LLVM Test Suite
      with:
        test_ref: ${{ inputs.lts_ref }}
        sycl_artifact: sycl_linux_${{ inputs.build_artifact_suffix }}
        sycl_archive: llvm_sycl.tar.xz
        lit_artifact: sycl_lit_${{ inputs.build_artifact_suffix }}
        lit_archive: lit.tar.xz
        check_sycl_all: ${{ matrix.check_sycl_all }}
        results_name_suffix: ${{ matrix.config }}_${{ inputs.build_artifact_suffix }}
        cmake_args: '${{ matrix.cmake_args }} ${{ inputs.lts_cmake_extra_args }}'

  aws-stop:
    name: Stop AWS
    needs: [ aws-start, llvm_test_suite ]
    if: ${{ always() && inputs.lts_ats_matrix != '' }}
    runs-on: ubuntu-latest
    environment: aws
    steps:
      - name: Setup script
        run: |
          mkdir -p ./aws-ec2
          wget raw.githubusercontent.com/apstasen/llvm/sycl/devops/actions/aws-ec2/action.yml   -P ./aws-ec2
          wget raw.githubusercontent.com/apstasen/llvm/sycl/devops/actions/aws-ec2/aws-ec2.js   -P ./aws-ec2
          wget raw.githubusercontent.com/apstasen/llvm/sycl/devops/actions/aws-ec2/package.json -P ./aws-ec2
          npm install ./aws-ec2
      - name: Stop AWS EC2 runners
        uses: ./aws-ec2
        with:
          runs-on-list: ${{ inputs.lts_aws_matrix }}
          mode: stop
          GH_PERSONAL_ACCESS_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
